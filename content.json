{"meta":{"title":"Ouran's blog","subtitle":"","description":"前端小哥日常备忘录","author":"偶然","url":"http://ouranjun.cn","root":"/"},"pages":[{"title":"","date":"2020-08-08T08:46:47.775Z","updated":"2020-08-08T08:46:47.775Z","comments":true,"path":"about/index.html","permalink":"http://ouranjun.cn/about/","excerpt":"","text":""},{"title":"所有分类","date":"2020-08-08T08:22:44.280Z","updated":"2020-08-08T08:22:44.280Z","comments":true,"path":"categories/index.html","permalink":"http://ouranjun.cn/categories/","excerpt":"","text":""},{"title":"","date":"2020-08-08T08:46:17.290Z","updated":"2020-08-08T08:46:17.290Z","comments":true,"path":"link/index.html","permalink":"http://ouranjun.cn/link/","excerpt":"","text":""}],"posts":[{"title":"javascript数组的常用操作方法","slug":"js数组操作的常用方法","date":"2020-08-08T07:49:17.446Z","updated":"2020-08-11T13:54:09.602Z","comments":true,"path":"/post/js数组操作的常用方法/","link":"","permalink":"http://ouranjun.cn/post/js%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/","excerpt":"javascript数组的常用操作方法","text":"javascript数组的常用操作方法 暂未有内容","categories":[],"tags":[]},{"title":"javascript正则表达式使用方法及常用表达式","slug":"正则表达式","date":"2020-08-08T07:48:02.608Z","updated":"2020-08-09T07:19:03.807Z","comments":true,"path":"/post/正则表达式/","link":"","permalink":"http://ouranjun.cn/post/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"导读：这篇文章主要学习如何使用[正则表达式]和如何去[校验]输入的内容,接下来一起看看吧","text":"导读：这篇文章主要学习如何使用[正则表达式]和如何去[校验]输入的内容,接下来一起看看吧 JavaScript正则表达式正则表达式 使用单个字符串来描述、匹配一系列符合某个语句规则的字符串搜索模式 语法/正则表达式主体/举个栗子 12var reg &#x3D; &#x2F;^\\d&#123;11&#125;$&#x2F;&#x2F;&#x2F; 匹配11位纯数字 ‘^’为匹配首字符必须为某某‘$’为匹配末字符必须为某某‘\\d’为匹配0-9的数字 也可为[0-9] 常用方法search() //搜索replace() // 替换 123456&#x2F;&#x2F;search()var str &#x3D; &#39;hello world!&#39;var n &#x3D; str.search(&#x2F;world&#x2F;) &#x2F;&#x2F;n &#x3D; 7 (如何搜索不到就返回-1)&#x2F;&#x2F; replace()var str &#x3D; &#39;hello world!&#39;var txt &#x3D; str.replace(&#x2F;javascript&#x2F;i,&#39;world&#39;) &#x2F;&#x2F;txt &#x3D; &#39;hello javascript&#39; 正则修饰符i 执行对大小写不敏感的匹配g 执行全局匹配m 执行多行匹配 正则表达式模式某一范围[abc] 查找方括号的任何字符[0-9] 查找任何从0-9的数字(x|y) 查找任何x或y的选项 元字符\\d 查找数字 相当于[0-9]\\D 匹配非数字字符\\w 匹配单个字符(字母、数字或者下划线) 等价于 [A-Za-z0-9_]\\W 匹配非单字符 等价于[^A-Za-z0-9_]\\s 查找空白字符\\S 匹配非空字符\\b 匹配单词边界(*) 匹配一个表达式0次或者多次 {0,}(+) 匹配前一个表达式1次或者多次 {1,}(?) 匹配前一个表达式0次或者1次\\uxxx 查找以16进制 xxx 规定的 Unicode 使用 RegExp 对象test()test()方法用于检测一个字符串是否匹配某一模式,如果匹配，则返回true 否则返回false举个例子 12var reg &#x3D; &#x2F;e&#x2F;return reg.test(&#39;the best things in life are free!&#39;) &#x2F;&#x2F;true 常用实例12345678910111213141516171819202122232425&#x2F;&#x2F; 是否带有小数function isDecimal(strValue) &#123; var objRegExp &#x3D; &#x2F;^\\d+\\.\\d+$&#x2F; return objRegExp.test(strValue)&#125;&#x2F;&#x2F; 是否含有中文名称function ischina(strValue) &#123; var objRegExp &#x3D; &#x2F;^[\\u4E00-\\u9FA5]&#123;2,4&#125;$&#x2F; return objRegExp.test(strValue)&#125;&#x2F;&#x2F; 是否有8位纯数字组成function isStudentNo(strValue) &#123; var objRegExp &#x3D; &#x2F;^\\d&#123;8&#125;$&#x2F; return objRegExp.test(strValue)&#125;&#x2F;&#x2F; 是否符合电话号码格式function isphoneNum(strValue) &#123; var objRegExp &#x3D; &#x2F;^((0\\d&#123;2,3&#125;-\\d&#123;7,8&#125;)|(1[3584]\\d&#123;9&#125;))$&#x2F; return objRegExp.test(strValue)&#125;&#x2F;&#x2F; 是否符合邮箱格式function isEmail(strValue) &#123; var objRegExp &#x3D; &#x2F;^\\w+@[a-zA-Z0-9]&#123;2,10&#125;(?:\\.[a-z]&#123;2,4&#125;$)&#x2F; return objRegExp.test(strValue)&#125;","categories":[],"tags":[]},{"title":"Vue中动态修改数组而视图不更新原因及解决方法","slug":"vueupdate","date":"2020-08-08T07:46:16.991Z","updated":"2020-08-08T15:23:52.589Z","comments":true,"path":"/post/vueupdate/","link":"","permalink":"http://ouranjun.cn/post/vueupdate/","excerpt":"vue数据不更新的原因(vue中数据更改了，但是视图没有更新)","text":"vue数据不更新的原因(vue中数据更改了，但是视图没有更新) tempalte代码12345678&lt;div id&#x3D;&quot;app&quot;&gt; &lt;ul v-for&#x3D;&quot;(item,index) in todoList&quot; :key&#x3D;&quot;index&quot;&gt; &lt;li&gt;&lt;&#x2F;li&gt; &lt;button @click&#x3D;&#39;editItem(index)&#39;&gt;修改&lt;&#x2F;button&gt; &lt;&#x2F;ul&gt; &lt;button @click&#x3D;&#39;updataItem&#39;&gt;新增&lt;&#x2F;button&gt; &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;input_value&quot;&gt;&lt;&#x2F;div&gt; js代码123456789101112131415161718&lt;script&gt;var vm &#x3D; new Vue(&#123; el: &#39;#app&#39;, data: &#123; todoList:[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;], text: 4 &#125;, methods: &#123; updataItem() &#123; vm.todoList.push(vm.text++); &#125;, editItem(index) &#123; var newValue &#x3D; document.querySelector(&#39;#input_value&#39;).value vm.todoList[index] &#x3D; newValue &#125; &#125; &#125;) &lt;&#x2F;script&gt; 上面代码非常简单，我们都知道vue中的data里面声明的数据才具有响应式，所以一开始在data中声明的todoList是包含一些元素，初始遍历一些内容，然后我们在js代码中执行了两行代码 12var newValue &#x3D; document.querySelector(&#39;#input_value&#39;).valuevm.todoList[index] &#x3D; newValue 其中 vm.todoList[index] = newValue 是不具有响应式的，但是数据是有更新的，原因：vue的dom更新是异步的，即当setter操作发生后，指令并不会立马更新，指令的更新操作会有一个延迟，当指令更新真正执行的时候，此时vm.todoList[index]属性已经赋值，所以指令更新模板时得到的是新值。 数组更新检测vue包含一些数组操作方法，是可以更新数据并刷新视图的，这些方法如下： 1234567push() &#x2F;&#x2F;末端新增pop() &#x2F;&#x2F;末端删除unshift() &#x2F;&#x2F;开端新增shift() &#x2F;&#x2F;开端删除splice() &#x2F;&#x2F; 指定位置删除、替换、插入sort() &#x2F;&#x2F;翻转reserve() &#x2F;&#x2F;翻转 注意事项由于 javascript 的限制，vue不能检测以下变动vm.todoList[index] = newValuevm.todoList.length = newLength 解决方法123456&#x2F;&#x2F; Vue.set 或 this.$set(vm.items,key,newValue)vm.$set(vm.todoList,index,newValue)&#x2F;&#x2F; 利用vue提供的$forceUpdate() 刷新视图 vm.$forceUpdate()&#x2F;&#x2F; 用数组操作方法vm.todoList.splice(index,1,newValue) 总结1.直接向嵌套对象提供响应式属性2.用forceUpdate() 刷新视图3.用数组方法操作Vue.set或 this.$set(vm.items,key,newValue)vm.$forceUpdate()vm.todoList.splice(index,1,newValue)","categories":[],"tags":[]},{"title":"Vue + Element UI 循环生成checkbox无法选中问题","slug":"Vueset","date":"2020-08-05T16:22:40.972Z","updated":"2020-08-05T16:48:49.378Z","comments":true,"path":"/post/Vueset/","link":"","permalink":"http://ouranjun.cn/post/Vueset/","excerpt":"开始写一个获取一个数组遍历循环生成一些 checkbox 但是却无法选择，究其原因我们一起看看吧","text":"开始写一个获取一个数组遍历循环生成一些 checkbox 但是却无法选择，究其原因我们一起看看吧 html代码12345&lt;div class&#x3D;&quot;item&quot; v-for&#x3D;&quot;item in todoList&quot; :key&#x3D;&quot;item.id&quot;&gt; &lt;el-checkbox v-model&#x3D;&quot;item.status&quot; @change&#x3D;&#39;checkboxed&#39; :checked&#x3D;&quot;item.status&quot;&gt; &lt;div :class&#x3D;&quot;&#123;&#39;text_del&#39;: item.status&#125;&quot;&gt;&lt;&#x2F;div&gt; &lt;&#x2F;el-checkbox&gt;&lt;&#x2F;div&gt; javascript代码123456789101112131415data() &#123; return &#123; todolistValue &#x3D; &#123;&#125; &#125;&#125;methods: &#123; change() &#123; this.todolistValue.title &#x3D; value this.todolistValue.status &#x3D; false var id &#x3D; ++this.id this.todolistValue.id &#x3D; id this.todoList.push(this.todolistValue) this.todolistValue &#x3D; &#123;&#125;; &#125;&#125; 结果是，遍历出的视图根本无法选中和操作 经过查阅资料，原来究其原因是：Vue 不允许在已经创建的实例上动态添加新的根级响应式属性 (root-level reactive property)然而它可以使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上 所以我们使用以下代码即可 1this.$set(&#39;todolistValue&#39;,&#39;status&#39;,false)","categories":[],"tags":[]},{"title":"人生得意须尽欢，莫使金樽空对月。","slug":"hello-world","date":"2020-07-29T13:54:26.423Z","updated":"2020-07-29T14:53:57.448Z","comments":true,"path":"/post/hello-world/","link":"","permalink":"http://ouranjun.cn/post/hello-world/","excerpt":"将进酒君不见黄河之水天上来，奔流到海不复回。君不见高堂明镜悲白发，朝如青丝暮成雪。","text":"将进酒君不见黄河之水天上来，奔流到海不复回。君不见高堂明镜悲白发，朝如青丝暮成雪。 人生得意须尽欢，莫使金樽空对月。天生我材必有用，千金散尽还复来。烹羊宰牛且为乐，会须一饮三百杯。岑夫子，丹丘生，将进酒，杯莫停。 与君歌一曲，请君为我倾耳听。钟鼓馔玉不足贵，但愿长醉不复醒。古来圣贤皆寂寞，惟有饮者留其名。陈王昔时宴平乐，斗酒十千恣欢谑。主人何为言少钱，径须沽取对君酌。五花马、千金裘，呼儿将出换美酒，与尔同销万古愁。","categories":[],"tags":[]}],"categories":[],"tags":[]}